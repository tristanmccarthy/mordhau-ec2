---
- hosts: local
  connection: local
  gather_facts: no
  vars:
    instance_type: t2.micro
    security_group: gameservers_sg
    image: ami-07dc734dc14746eab
    key_name: tmccarthy
    region: eu-west-2
    count: 1
  vars_files:
    - secrets.yml
  tasks:
    - name: Create a security group
      ec2_group:
        name: "{{ security_group }}"
        description: The gameservers security group
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0
    - name: Launch the new EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true 
        region: "{{ region }}"
        key_name: "{{ key_name }}"
        count: "{{count}}"
      register: ec2
    - name: Add the newly created instance to host group
      add_host:
        name: "{{ item.public_ip }}"
        groups: gameservers
      with_items: "{{ ec2.instances }}"
    - name: Add tag to Instance(s)
      ec2_tag:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        resource: "{{ item.id }}" 
        region: "{{ region }}" 
        state: "present"
      with_items: "{{ ec2.instances }}"
      args:
        tags:
          Type: gameserver
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_ip }}"
        port: 22 
        state: started 
      with_items: "{{ ec2.instances }}"
- hosts: gameservers
  remote_user: ubuntu
  become: yes
  gather_facts: no
  vars_files:
    - secrets.yml
  pre_tasks:
    - name: Install Python
      raw: 'sudo apt-get -y install python'
    - name: Enable i386 multiarch
      raw: 'sudo dpkg --add-architecture i386'
    - name: Create steam user
      user:
        name: steam
  tasks:
    - name: Install SteamCMD prerequisites
      apt:
        name: lib32gcc1
        state: present
    - name: Pre-answer steam install question
      debconf:
        name: steam
        question: steam/question
        value: 'I AGREE'
        vtype: select
    - name: Pre-accept Steam licence agreement
      debconf:
        name: steam
        question: steam/license
        value: ''
        vtype: note
    - name: Install SteamCMD
      apt:
        name: steamcmd
        state: present
    - name: Install Mordhau prerequisites
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - 'libfontconfig1'
        - 'libpangocairo-1.0-0'
        - 'libnss3'
        - 'libgconf2-4'
        - 'libxi6'
        - 'libxcursor1' 
        - 'libxss1'
        - 'libxcomposite1'
        - 'libasound2'
        - 'libxdamage1' 
        - 'libxtst6'
        - 'libatk1.0-0' 
        - 'libxrandr2'
    - block:
      - name: Create Mordhau installation file
        copy:
          src: ./mordhau-config/update_mordhau.txt
          dest: ~/update_mordhau.txt
          owner: steam
          group: steam
          mode: '0664'
      #- name: Install Mordhau
      #  shell: 'steamcmd +login {{ steam_username }} {{steam_password}} +runscript update_mordhau.txt'
      become: true
      become_user: steam
